# pages/home_page.py
import re
import os, time
from playwright.sync_api import expect
from .base_page import BasePage


class HomePage(BasePage):
    SEARCH_INPUT = "input[name='keyword'], input[name='q'], [placeholder*='T√¨m'], [placeholder*='t√¨m']"
    SEARCH_BUTTON = (
        "button[type='submit'], button:has-text('T√¨m'), button:has-text('Search')"
    )
    # üëâ CH·ªàNH L·∫†I TEXT/HREF CHO ƒê√öNG TH·ª∞C T·∫æ MENU C·ª¶A B·∫†N (n·∫øu kh√°c)
    NEW_CLASS_LINK = (
        "a:has-text('L·ªõp h·ªçc m·ªõi'), "
        "a:has-text('New Classes'), "
        "a:has-text('Danh s√°ch l·ªõp'), "
        "a:has-text('T√¨m l·ªõp'), "
        "a[href*='new-class'], a[href*='new-classes'], a[href*='classes/new'], a[href*='lop-moi']"
    )

    def __init__(self, page, base_url):
        super().__init__(page)
        self.base_url = base_url

    def goto(self):
        self.page.goto(self.base_url, wait_until="domcontentloaded")
        self.page.wait_for_load_state("networkidle")

    def search_from_home(self, kw: str | None):
        kw = (kw or "").strip()
        self.page.locator(self.SEARCH_INPUT).first.click()
        self.page.locator(self.SEARCH_INPUT).first.fill(kw)

        if kw:
            # ch·ªâ ch·ªù ƒëi·ªÅu h∆∞·ªõng khi c√≥ t·ª´ kh√≥a
            with self.page.expect_navigation(
                url=re.compile(r"/search(\?|$)", re.I), wait_until="load"
            ):
                if self.page.locator(self.SEARCH_BUTTON).first.count() > 0:
                    self.page.locator(self.SEARCH_BUTTON).first.click()
                else:
                    self.page.locator(self.SEARCH_INPUT).first.press("Enter")
        else:
            # kh√¥ng ch·ªù ƒëi·ªÅu h∆∞·ªõng khi r·ªóng (nhi·ªÅu site ·ªü l·∫°i trang ch·ªß)
            if self.page.locator(self.SEARCH_BUTTON).first.count() > 0:
                self.page.locator(self.SEARCH_BUTTON).first.click()
            else:
                self.page.locator(self.SEARCH_INPUT).first.press("Enter")
            self.page.wait_for_load_state("networkidle")

    def open_new_classes(self):
        """
        M·ªü trang 'L·ªõp h·ªçc m·ªõi' v·ªõi nhi·ªÅu chi·∫øn l∆∞·ª£c:
        - ƒê·∫£m b·∫£o ƒëang ·ªü Home
        - M·ªü hamburger/dropdown n·∫øu c√≥
        - Th·ª≠ nhi·ªÅu selector/text kh√°c nhau
        - Fallback ƒëi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp theo path ph·ªï bi·∫øn
        - Ch·ª•p ·∫£nh debug n·∫øu v·∫´n kh√¥ng t√¨m th·∫•y
        """
        # 0) v·ªÅ Home cho ch·∫Øc
        self.page.goto(self.base_url, wait_until="domcontentloaded")
        self.page.wait_for_load_state("networkidle")

        # 1) m·ªü hamburger/menu n·∫øu c√≥
        hamburger_selectors = [
            "[aria-label='Menu']",
            "[data-testid='menu']",
            ".navbar-toggler",
            ".hamburger",
            "button:has(svg)",
        ]
        for sel in hamburger_selectors:
            loc = self.page.locator(sel)
            if loc.count() and loc.first.is_visible():
                try:
                    loc.first.click()
                    self.page.wait_for_timeout(250)
                    break
                except Exception:
                    pass

        # 2) th·ª≠ t√¨m b·∫±ng nhi·ªÅu c√°ch
        name_regex = re.compile(
            r"(L·ªõp\s*h·ªçc\s*m·ªõi|Lop\s*hoc\s*moi|New\s*Classes|Danh\s*s√°ch\s*l·ªõp|T√¨m\s*l·ªõp)",
            re.I,
        )
        candidates = [
            lambda: self.page.get_by_role("link", name=name_regex),
            lambda: self.page.get_by_role("button", name=name_regex),
            lambda: self.page.get_by_text(name_regex),
            lambda: self.page.locator(self.NEW_CLASS_LINK),
        ]

        for factory in candidates:
            loc = factory()
            if loc.count() > 0:
                cand = loc.first
                try:
                    cand.scroll_into_view_if_needed(timeout=1000)
                    expect(cand).to_be_visible(timeout=2000)
                    cand.click()
                    self.page.wait_for_load_state("networkidle")
                    return
                except Exception:
                    # th·ª≠ ·ª©ng vi√™n kh√°c
                    pass

        # 3) fallback: ƒëo√°n path v√† ƒëi th·∫≥ng URL
        for path in ["/new-class", "/new-classes", "/classes/new", "/lop-moi"]:
            try:
                self.page.goto(self.base_url.rstrip("/") + path, wait_until="load")
                self.page.wait_for_load_state("networkidle")
                # c√≥ d·∫•u hi·ªáu l√† trang danh s√°ch l·ªõp?
                if (
                    self.page.locator(
                        "h1, h2, .class-item, [data-testid*='class']"
                    ).count()
                    > 0
                ):
                    return
            except Exception:
                pass

        # 4) ch·ª•p ·∫£nh debug r·ªìi raise l·ªói r√µ r√†ng
        os.makedirs("reports/screenshots", exist_ok=True)
        snap = f"reports/screenshots/open_new_classes_debug_{int(time.time())}.png"
        self.page.screenshot(path=snap, full_page=True)
        raise AssertionError(
            f"Kh√¥ng t√¨m th·∫•y menu/ƒë∆∞·ªùng d·∫´n 'L·ªõp h·ªçc m·ªõi'. ƒê√£ ch·ª•p ·∫£nh debug: {snap}. "
            "H√£y ch·ªânh l·∫°i NEW_CLASS_LINK ho·∫∑c name_regex cho kh·ªõp text/URL th·ª±c t·∫ø."
        )
