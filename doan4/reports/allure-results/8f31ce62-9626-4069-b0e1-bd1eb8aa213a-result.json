{"name": "Register Tutor Test Case: Hiring-5", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Event loop is closed! Is Playwright already stopped?", "trace": "tcid = 'Hiring-5', gender = 'Anh', name = 'Nguyen Van A', phone = '0912345678', address = 'Hà Nội', note = ''\nexpected_message = 'Hệ thống không báo lỗi và tiếp tục đăng ký', result = None, screenshot = None, video = None\n\n    @pytest.mark.parametrize(\n        \"tcid, gender, name, phone, address, note, expected_message, result, screenshot, video\",\n        read_test_data(DATA_FILE, \"RegisterTutorTestData\"),\n        ids=lambda val: str(val[0]) if isinstance(val, (list, tuple)) else str(val),\n    )\n    @allure.feature(\"Register Tutor\")\n    @allure.title(\"Register Tutor Test Case: {tcid}\")\n    def test_register_tutor(\n        tcid,\n        gender,\n        name,\n        phone,\n        address,\n        note,\n        expected_message,\n        result,\n        screenshot,\n        video,\n    ):\n        gender = \"\" if gender is None else str(gender)\n        name = \"\" if name is None else str(name)\n        phone = \"\" if phone is None else str(phone)\n        address = \"\" if address is None else str(address)\n        note = \"\" if note is None else str(note)\n        expected_message = \"\" if expected_message is None else str(expected_message)\n    \n        with sync_playwright() as p:\n            browser = p.chromium.launch(\n                headless=False, slow_mo=500, args=[\"--start-maximized\"]\n            )\n            context = browser.new_context(\n                no_viewport=True,\n                record_video_dir=VIDEO_DIR,\n                record_video_size={\"width\": 1280, \"height\": 720},\n            )\n            page = context.new_page()\n    \n            reg_page = RegisterTutorPage(page)\n            marketing_url = get_marketing_url()\n            reg_page.goto(marketing_url)\n    \n            with allure.step(\"Điền form và gửi\"):\n                reg_page.register(gender, name, phone, address, note)\n    \n            screenshot_path = os.path.join(SCREENSHOT_DIR, f\"{tcid}.png\")\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n            test_result = \"FAIL\"\n    \n            try:\n                if expected_message.strip():\n                    expect(page.get_by_text(expected_message, exact=False)).to_be_visible(\n                        timeout=10000\n                    )\n                else:\n                    expect(page).to_have_url(\n                        marketing_url + \"/dang-ky-thue-gia-su\", timeout=10000\n                    )\n    \n                test_result = \"PASS\"\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_success\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n            except AssertionError:\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_fail\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n    \n            # Đóng page -> lấy video -> move -> attach\n            # 1) Giữ handle video trước khi đóng\n            video_handle = getattr(page, \"video\", None)\n    \n            # 2) Đóng page trước\n            page.close()\n    \n            # 3) Đóng context để FLUSH video xuống đĩa (rất quan trọng trên Windows)\n            context.close()\n    \n            # 4) Lấy đường dẫn nguồn của video sau khi context đã đóng\n            src_video = None\n            if video_handle:\n                try:\n                    src_video = video_handle.path()\n                except Exception:\n                    src_video = None\n    \n            # 5) (Khuyến nghị) COPY thay vì MOVE để tránh unlink khi file còn bị giữ\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n    \n            if src_video and os.path.exists(src_video):\n                # đợi file “ổn định” (tồn tại & kích thước không đổi 2 lần liên tiếp)\n                prev = -1\n                for _ in range(15):\n                    try:\n                        size = os.path.getsize(src_video)\n                        if size > 0 and size == prev:\n                            break\n                        prev = size\n                    except FileNotFoundError:\n                        pass\n                        time.sleep(0.2)\n    \n        copied = False\n        for _ in range(10):\n            try:\n                # copy2 giữ metadata; dùng copy thay vì move để không unlink ngay\n                shutil.copy2(src_video, final_video_path)\n                copied = True\n                break\n            except PermissionError:\n                time.sleep(0.2)\n    \n        if copied:\n            try:\n                allure.attach.file(\n                    final_video_path,\n                    name=f\"{tcid}_video\",\n                    attachment_type=allure.attachment_type.WEBM,\n                )\n            except Exception:\n                pass\n        else:\n            final_video_path = None\n    \n        # 6) Ghi Excel\n        write_test_result(\n            data_file=DATA_FILE,\n            sheet_name=\"RegisterTutorTestData\",\n            tcid=tcid,\n            result=test_result,\n            screenshot_path=screenshot_path,\n            video_path=final_video_path,\n        )\n    \n        # 7) Cuối cùng mới đóng browser\n>       browser.close()\n\ntests\\test_register_tutor.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Browser type=<BrowserType name=chromium executable_path=C:\\Users\\hoang\\AppData\\Local\\ms-playwright\\chromium-1187\\chrome-win\\chrome.exe> version=140.0.7339.16>\n\n    def close(self, *, reason: typing.Optional[str] = None) -> None:\n        \"\"\"Browser.close\n    \n        In case this browser is obtained using `browser_type.launch()`, closes the browser and all of its pages (if\n        any were opened).\n    \n        In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from\n        the browser server.\n    \n        **NOTE** This is similar to force-quitting the browser. To close pages gracefully and ensure you receive page close\n        events, call `browser_context.close()` on any `BrowserContext` instances you explicitly created earlier\n        using `browser.new_context()` **before** calling `browser.close()`.\n    \n        The `Browser` object itself is considered to be disposed and cannot be used anymore.\n    \n        Parameters\n        ----------\n        reason : Union[str, None]\n            The reason to be reported to the operations interrupted by the browser closure.\n        \"\"\"\n    \n>       return mapping.from_maybe_impl(self._sync(self._impl_obj.close(reason=reason)))\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       playwright._impl._errors.Error: Event loop is closed! Is Playwright already stopped?\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:14269: Error"}, "steps": [{"name": "Điền form và gửi", "status": "passed", "start": 1759996384001, "stop": 1759996388776}], "attachments": [{"name": "Hiring-5_fail", "source": "9c8fe6ee-3a5e-4399-ab67-caed9572ba47-attachment.png", "type": "image/png"}, {"name": "Hiring-5_video", "source": "cdfff575-e892-4f31-a9b8-4c11f262bb70-attachment.webm", "type": "video/webm"}], "parameters": [{"name": "tcid", "value": "'Hiring-5'"}, {"name": "gender", "value": "'Anh'"}, {"name": "name", "value": "'Nguyen Van A'"}, {"name": "phone", "value": "'0912345678'"}, {"name": "address", "value": "'Hà Nội'"}, {"name": "note", "value": "None"}, {"name": "expected_message", "value": "'Hệ thống không báo lỗi và tiếp tục đăng ký'"}, {"name": "result", "value": "None"}, {"name": "screenshot", "value": "None"}, {"name": "video", "value": "None"}], "start": 1759996381675, "stop": 1759996402485, "uuid": "1b71ff91-c50f-43e6-8d1a-c2d6dc73f7de", "historyId": "b094ea5fc26eb2649bfe0560cad1b11e", "testCaseId": "b422b89a2652c3bc20ad4eba6e0b3edf", "fullName": "tests.test_register_tutor#test_register_tutor", "labels": [{"name": "feature", "value": "Register Tutor"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_register_tutor"}, {"name": "host", "value": "LTADUYEN"}, {"name": "thread", "value": "19744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_register_tutor"}], "titlePath": ["tests", "test_register_tutor.py"]}