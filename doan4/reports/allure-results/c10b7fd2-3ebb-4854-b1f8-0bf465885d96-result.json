{"name": "Register Tutor Test Case: Hiring-4", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Event loop is closed! Is Playwright already stopped?", "trace": "tcid = 'Hiring-4', gender = 'Anh', name = 'Nguyen Van A', phone = '0912345678', address = '', note = ''\nexpected_message = 'Hệ thống không báo lỗi và tiếp tục đăng ký', result = 'FAIL', screenshot = 'Hiring-4.png'\nvideo = 'Hiring-4.webm'\n\n    @pytest.mark.parametrize(\n        \"tcid, gender, name, phone, address, note, expected_message, result, screenshot, video\",\n        read_test_data(DATA_FILE, \"RegisterTutorTestData\"),\n        ids=lambda val: str(val[0]) if isinstance(val, (list, tuple)) else str(val),\n    )\n    @allure.feature(\"Register Tutor\")\n    @allure.title(\"Register Tutor Test Case: {tcid}\")\n    def test_register_tutor(\n        tcid,\n        gender,\n        name,\n        phone,\n        address,\n        note,\n        expected_message,\n        result,\n        screenshot,\n        video,\n    ):\n        gender = \"\" if gender is None else str(gender)\n        name = \"\" if name is None else str(name)\n        phone = \"\" if phone is None else str(phone)\n        address = \"\" if address is None else str(address)\n        note = \"\" if note is None else str(note)\n        expected_message = \"\" if expected_message is None else str(expected_message)\n    \n        with sync_playwright() as p:\n            browser = p.chromium.launch(\n                headless=False, slow_mo=500, args=[\"--start-maximized\"]\n            )\n            context = browser.new_context(\n                no_viewport=True,\n                record_video_dir=VIDEO_DIR,\n                record_video_size={\"width\": 1280, \"height\": 720},\n            )\n            page = context.new_page()\n    \n            reg_page = RegisterTutorPage(page)\n            marketing_url = get_marketing_url()\n            reg_page.goto(marketing_url)\n    \n            with allure.step(\"Điền form và gửi\"):\n                reg_page.register(gender, name, phone, address, note)\n    \n            screenshot_path = os.path.join(SCREENSHOT_DIR, f\"{tcid}.png\")\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n            test_result = \"FAIL\"\n    \n            try:\n                if expected_message.strip():\n                    expect(page.get_by_text(expected_message, exact=False)).to_be_visible(\n                        timeout=10000\n                    )\n                else:\n                    expect(page).to_have_url(\n                        marketing_url + \"/dang-ky-thue-gia-su\", timeout=10000\n                    )\n    \n                test_result = \"PASS\"\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_success\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n            except AssertionError:\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_fail\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n    \n        # === LẤY & COPY VIDEO (WINDOWS-SAFE) ===\n        # 1) Giữ handle video trước khi đóng\n        video_handle = getattr(page, \"video\", None)\n    \n        # 2) Đóng page trước\n>       page.close()\n\ntests\\test_register_tutor.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://www.growgreen.edu.vn/thankyou'>\n\n    def close(\n        self,\n        *,\n        run_before_unload: typing.Optional[bool] = None,\n        reason: typing.Optional[str] = None,\n    ) -> None:\n        \"\"\"Page.close\n    \n        If `runBeforeUnload` is `false`, does not run any unload handlers and waits for the page to be closed. If\n        `runBeforeUnload` is `true` the method will run unload handlers, but will **not** wait for the page to close.\n    \n        By default, `page.close()` **does not** run `beforeunload` handlers.\n    \n        **NOTE** if `runBeforeUnload` is passed as true, a `beforeunload` dialog might be summoned and should be handled\n        manually via `page.on('dialog')` event.\n    \n        Parameters\n        ----------\n        run_before_unload : Union[bool, None]\n            Defaults to `false`. Whether to run the\n            [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.\n        reason : Union[str, None]\n            The reason to be reported to the operations interrupted by the page closure.\n        \"\"\"\n    \n        return mapping.from_maybe_impl(\n>           self._sync(\n                self._impl_obj.close(runBeforeUnload=run_before_unload, reason=reason)\n            )\n        )\nE       playwright._impl._errors.Error: Event loop is closed! Is Playwright already stopped?\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:9841: Error"}, "steps": [{"name": "Điền form và gửi", "status": "passed", "start": 1759996764655, "stop": 1759996768333}], "attachments": [{"name": "Hiring-4_fail", "source": "e0076b80-07b6-4267-a3fd-8b4c7fe7e334-attachment.png", "type": "image/png"}], "parameters": [{"name": "tcid", "value": "'Hiring-4'"}, {"name": "gender", "value": "'Anh'"}, {"name": "name", "value": "'Nguyen Van A'"}, {"name": "phone", "value": "'0912345678'"}, {"name": "address", "value": "None"}, {"name": "note", "value": "None"}, {"name": "expected_message", "value": "'Hệ thống không báo lỗi và tiếp tục đăng ký'"}, {"name": "result", "value": "'FAIL'"}, {"name": "screenshot", "value": "'Hiring-4.png'"}, {"name": "video", "value": "'Hiring-4.webm'"}], "start": 1759996762365, "stop": 1759996779193, "uuid": "94ba9935-9da9-4352-a84d-809afe8ec9d7", "historyId": "7aa979c97eca47889ff24f3b33e19667", "testCaseId": "b422b89a2652c3bc20ad4eba6e0b3edf", "fullName": "tests.test_register_tutor#test_register_tutor", "labels": [{"name": "feature", "value": "Register Tutor"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_register_tutor"}, {"name": "host", "value": "LTADUYEN"}, {"name": "thread", "value": "12868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_register_tutor"}], "titlePath": ["tests", "test_register_tutor.py"]}