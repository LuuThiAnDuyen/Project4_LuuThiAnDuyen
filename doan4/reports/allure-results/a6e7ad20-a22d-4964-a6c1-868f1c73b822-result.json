{"name": "Register Tutor Test Case: Hiring-1", "status": "broken", "statusDetails": {"message": "PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'", "trace": "src = 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\ndst = 'reports\\\\videos\\\\register\\\\Hiring-1.webm', copy_function = <function copy2 at 0x000001D490BAC7C0>\n\n    def move(src, dst, copy_function=copy2):\n        \"\"\"Recursively move a file or directory to another location. This is\n        similar to the Unix \"mv\" command. Return the file or directory's\n        destination.\n    \n        If dst is an existing directory or a symlink to a directory, then src is\n        moved inside that directory. The destination path in that directory must\n        not already exist.\n    \n        If dst already exists but is not a directory, it may be overwritten\n        depending on os.rename() semantics.\n    \n        If the destination is on our current filesystem, then rename() is used.\n        Otherwise, src is copied to the destination and then removed. Symlinks are\n        recreated under the new name if os.rename() fails because of cross\n        filesystem renames.\n    \n        The optional `copy_function` argument is a callable that will be used\n        to copy the source or it will be delegated to `copytree`.\n        By default, copy2() is used, but any function that supports the same\n        signature (like copy()) can be used.\n    \n        A lot more could be done here...  A look at a mv.c shows a lot of\n        the issues this implementation glosses over.\n    \n        \"\"\"\n        sys.audit(\"shutil.move\", src, dst)\n        real_dst = dst\n        if os.path.isdir(dst):\n            if _samefile(src, dst) and not os.path.islink(src):\n                # We might be on a case insensitive filesystem,\n                # perform the rename anyway.\n                os.rename(src, dst)\n                return\n    \n            # Using _basename instead of os.path.basename is important, as we must\n            # ignore any trailing slash to avoid the basename returning ''\n            real_dst = os.path.join(dst, _basename(src))\n    \n            if os.path.exists(real_dst):\n                raise Error(\"Destination path '%s' already exists\" % real_dst)\n        try:\n>           os.rename(src, real_dst)\nE           PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm' -> 'reports\\\\videos\\\\register\\\\Hiring-1.webm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:856: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\ntcid = 'Hiring-1', gender = 'Anh', name = 'Nguyen Van A', phone = '0912345678', address = 'Hà Nội', note = ''\nexpected_message = 'Đăng ký thành công', result = None, screenshot = None, video = None\n\n    @pytest.mark.parametrize(\n        \"tcid, gender, name, phone, address, note, expected_message, result, screenshot, video\",\n        read_test_data(DATA_FILE, \"RegisterTutorTestData\"),\n        ids=lambda val: str(val[0]) if isinstance(val, (list, tuple)) else str(val),\n    )\n    @allure.feature(\"Register Tutor\")\n    @allure.title(\"Register Tutor Test Case: {tcid}\")\n    def test_register_tutor(\n        tcid,\n        gender,\n        name,\n        phone,\n        address,\n        note,\n        expected_message,\n        result,\n        screenshot,\n        video,\n    ):\n        gender = \"\" if gender is None else str(gender)\n        name = \"\" if name is None else str(name)\n        phone = \"\" if phone is None else str(phone)\n        address = \"\" if address is None else str(address)\n        note = \"\" if note is None else str(note)\n        expected_message = \"\" if expected_message is None else str(expected_message)\n    \n        with sync_playwright() as p:\n            browser = p.chromium.launch(\n                headless=False, slow_mo=500, args=[\"--start-maximized\"]\n            )\n            context = browser.new_context(\n                no_viewport=True,\n                record_video_dir=VIDEO_DIR,\n                record_video_size={\"width\": 1280, \"height\": 720},\n            )\n            page = context.new_page()\n    \n            reg_page = RegisterTutorPage(page)\n            marketing_url = get_marketing_url()\n            reg_page.goto(marketing_url)\n    \n            with allure.step(\"Điền form và gửi\"):\n                reg_page.register(gender, name, phone, address, note)\n    \n            screenshot_path = os.path.join(SCREENSHOT_DIR, f\"{tcid}.png\")\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n            test_result = \"FAIL\"\n    \n            try:\n                if expected_message.strip():\n                    expect(page.get_by_text(expected_message, exact=False)).to_be_visible(\n                        timeout=10000\n                    )\n                else:\n                    expect(page).to_have_url(\n                        marketing_url + \"/dang-ky-thue-gia-su\", timeout=10000\n                    )\n    \n                test_result = \"PASS\"\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_success\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n            except AssertionError:\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_fail\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n    \n            # Đóng page -> lấy video -> move -> attach\n            page.close()\n            try:\n                src_video = page.video.path()\n            except Exception:\n                src_video = None\n    \n            if src_video and os.path.exists(src_video):\n                try:\n>                   shutil.move(src_video, final_video_path)\n\ntests\\test_register_tutor.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\ndst = 'reports\\\\videos\\\\register\\\\Hiring-1.webm', copy_function = <function copy2 at 0x000001D490BAC7C0>\n\n    def move(src, dst, copy_function=copy2):\n        \"\"\"Recursively move a file or directory to another location. This is\n        similar to the Unix \"mv\" command. Return the file or directory's\n        destination.\n    \n        If dst is an existing directory or a symlink to a directory, then src is\n        moved inside that directory. The destination path in that directory must\n        not already exist.\n    \n        If dst already exists but is not a directory, it may be overwritten\n        depending on os.rename() semantics.\n    \n        If the destination is on our current filesystem, then rename() is used.\n        Otherwise, src is copied to the destination and then removed. Symlinks are\n        recreated under the new name if os.rename() fails because of cross\n        filesystem renames.\n    \n        The optional `copy_function` argument is a callable that will be used\n        to copy the source or it will be delegated to `copytree`.\n        By default, copy2() is used, but any function that supports the same\n        signature (like copy()) can be used.\n    \n        A lot more could be done here...  A look at a mv.c shows a lot of\n        the issues this implementation glosses over.\n    \n        \"\"\"\n        sys.audit(\"shutil.move\", src, dst)\n        real_dst = dst\n        if os.path.isdir(dst):\n            if _samefile(src, dst) and not os.path.islink(src):\n                # We might be on a case insensitive filesystem,\n                # perform the rename anyway.\n                os.rename(src, dst)\n                return\n    \n            # Using _basename instead of os.path.basename is important, as we must\n            # ignore any trailing slash to avoid the basename returning ''\n            real_dst = os.path.join(dst, _basename(src))\n    \n            if os.path.exists(real_dst):\n                raise Error(\"Destination path '%s' already exists\" % real_dst)\n        try:\n            os.rename(src, real_dst)\n        except OSError:\n            if os.path.islink(src):\n                linkto = os.readlink(src)\n                os.symlink(linkto, real_dst)\n                os.unlink(src)\n            elif os.path.isdir(src):\n                if _destinsrc(src, dst):\n                    raise Error(\"Cannot move a directory '%s' into itself\"\n                                \" '%s'.\" % (src, dst))\n                if (_is_immutable(src)\n                        or (not os.access(src, os.W_OK) and os.listdir(src)\n                            and sys.platform == 'darwin')):\n                    raise PermissionError(\"Cannot move the non-empty directory \"\n                                          \"'%s': Lacking write permission to '%s'.\"\n                                          % (src, src))\n                copytree(src, real_dst, copy_function=copy_function,\n                         symlinks=True)\n                rmtree(src)\n            else:\n                copy_function(src, real_dst)\n>               os.unlink(src)\nE               PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:877: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\nsrc = 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\ndst = 'reports\\\\videos\\\\register\\\\Hiring-1_1.webm', copy_function = <function copy2 at 0x000001D490BAC7C0>\n\n    def move(src, dst, copy_function=copy2):\n        \"\"\"Recursively move a file or directory to another location. This is\n        similar to the Unix \"mv\" command. Return the file or directory's\n        destination.\n    \n        If dst is an existing directory or a symlink to a directory, then src is\n        moved inside that directory. The destination path in that directory must\n        not already exist.\n    \n        If dst already exists but is not a directory, it may be overwritten\n        depending on os.rename() semantics.\n    \n        If the destination is on our current filesystem, then rename() is used.\n        Otherwise, src is copied to the destination and then removed. Symlinks are\n        recreated under the new name if os.rename() fails because of cross\n        filesystem renames.\n    \n        The optional `copy_function` argument is a callable that will be used\n        to copy the source or it will be delegated to `copytree`.\n        By default, copy2() is used, but any function that supports the same\n        signature (like copy()) can be used.\n    \n        A lot more could be done here...  A look at a mv.c shows a lot of\n        the issues this implementation glosses over.\n    \n        \"\"\"\n        sys.audit(\"shutil.move\", src, dst)\n        real_dst = dst\n        if os.path.isdir(dst):\n            if _samefile(src, dst) and not os.path.islink(src):\n                # We might be on a case insensitive filesystem,\n                # perform the rename anyway.\n                os.rename(src, dst)\n                return\n    \n            # Using _basename instead of os.path.basename is important, as we must\n            # ignore any trailing slash to avoid the basename returning ''\n            real_dst = os.path.join(dst, _basename(src))\n    \n            if os.path.exists(real_dst):\n                raise Error(\"Destination path '%s' already exists\" % real_dst)\n        try:\n>           os.rename(src, real_dst)\nE           PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm' -> 'reports\\\\videos\\\\register\\\\Hiring-1_1.webm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:856: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\ntcid = 'Hiring-1', gender = 'Anh', name = 'Nguyen Van A', phone = '0912345678', address = 'Hà Nội', note = ''\nexpected_message = 'Đăng ký thành công', result = None, screenshot = None, video = None\n\n    @pytest.mark.parametrize(\n        \"tcid, gender, name, phone, address, note, expected_message, result, screenshot, video\",\n        read_test_data(DATA_FILE, \"RegisterTutorTestData\"),\n        ids=lambda val: str(val[0]) if isinstance(val, (list, tuple)) else str(val),\n    )\n    @allure.feature(\"Register Tutor\")\n    @allure.title(\"Register Tutor Test Case: {tcid}\")\n    def test_register_tutor(\n        tcid,\n        gender,\n        name,\n        phone,\n        address,\n        note,\n        expected_message,\n        result,\n        screenshot,\n        video,\n    ):\n        gender = \"\" if gender is None else str(gender)\n        name = \"\" if name is None else str(name)\n        phone = \"\" if phone is None else str(phone)\n        address = \"\" if address is None else str(address)\n        note = \"\" if note is None else str(note)\n        expected_message = \"\" if expected_message is None else str(expected_message)\n    \n        with sync_playwright() as p:\n            browser = p.chromium.launch(\n                headless=False, slow_mo=500, args=[\"--start-maximized\"]\n            )\n            context = browser.new_context(\n                no_viewport=True,\n                record_video_dir=VIDEO_DIR,\n                record_video_size={\"width\": 1280, \"height\": 720},\n            )\n            page = context.new_page()\n    \n            reg_page = RegisterTutorPage(page)\n            marketing_url = get_marketing_url()\n            reg_page.goto(marketing_url)\n    \n            with allure.step(\"Điền form và gửi\"):\n                reg_page.register(gender, name, phone, address, note)\n    \n            screenshot_path = os.path.join(SCREENSHOT_DIR, f\"{tcid}.png\")\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n            test_result = \"FAIL\"\n    \n            try:\n                if expected_message.strip():\n                    expect(page.get_by_text(expected_message, exact=False)).to_be_visible(\n                        timeout=10000\n                    )\n                else:\n                    expect(page).to_have_url(\n                        marketing_url + \"/dang-ky-thue-gia-su\", timeout=10000\n                    )\n    \n                test_result = \"PASS\"\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_success\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n            except AssertionError:\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_fail\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n    \n            # Đóng page -> lấy video -> move -> attach\n            page.close()\n            try:\n                src_video = page.video.path()\n            except Exception:\n                src_video = None\n    \n            if src_video and os.path.exists(src_video):\n                try:\n                    shutil.move(src_video, final_video_path)\n                except Exception:\n                    base, ext = os.path.splitext(final_video_path)\n                    alt = base + \"_1\" + ext\n>                   shutil.move(src_video, alt)\n\ntests\\test_register_tutor.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\ndst = 'reports\\\\videos\\\\register\\\\Hiring-1_1.webm', copy_function = <function copy2 at 0x000001D490BAC7C0>\n\n    def move(src, dst, copy_function=copy2):\n        \"\"\"Recursively move a file or directory to another location. This is\n        similar to the Unix \"mv\" command. Return the file or directory's\n        destination.\n    \n        If dst is an existing directory or a symlink to a directory, then src is\n        moved inside that directory. The destination path in that directory must\n        not already exist.\n    \n        If dst already exists but is not a directory, it may be overwritten\n        depending on os.rename() semantics.\n    \n        If the destination is on our current filesystem, then rename() is used.\n        Otherwise, src is copied to the destination and then removed. Symlinks are\n        recreated under the new name if os.rename() fails because of cross\n        filesystem renames.\n    \n        The optional `copy_function` argument is a callable that will be used\n        to copy the source or it will be delegated to `copytree`.\n        By default, copy2() is used, but any function that supports the same\n        signature (like copy()) can be used.\n    \n        A lot more could be done here...  A look at a mv.c shows a lot of\n        the issues this implementation glosses over.\n    \n        \"\"\"\n        sys.audit(\"shutil.move\", src, dst)\n        real_dst = dst\n        if os.path.isdir(dst):\n            if _samefile(src, dst) and not os.path.islink(src):\n                # We might be on a case insensitive filesystem,\n                # perform the rename anyway.\n                os.rename(src, dst)\n                return\n    \n            # Using _basename instead of os.path.basename is important, as we must\n            # ignore any trailing slash to avoid the basename returning ''\n            real_dst = os.path.join(dst, _basename(src))\n    \n            if os.path.exists(real_dst):\n                raise Error(\"Destination path '%s' already exists\" % real_dst)\n        try:\n            os.rename(src, real_dst)\n        except OSError:\n            if os.path.islink(src):\n                linkto = os.readlink(src)\n                os.symlink(linkto, real_dst)\n                os.unlink(src)\n            elif os.path.isdir(src):\n                if _destinsrc(src, dst):\n                    raise Error(\"Cannot move a directory '%s' into itself\"\n                                \" '%s'.\" % (src, dst))\n                if (_is_immutable(src)\n                        or (not os.access(src, os.W_OK) and os.listdir(src)\n                            and sys.platform == 'darwin')):\n                    raise PermissionError(\"Cannot move the non-empty directory \"\n                                          \"'%s': Lacking write permission to '%s'.\"\n                                          % (src, src))\n                copytree(src, real_dst, copy_function=copy_function,\n                         symlinks=True)\n                rmtree(src)\n            else:\n                copy_function(src, real_dst)\n>               os.unlink(src)\nE               PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\hoang\\\\Desktop\\\\doan4\\\\reports\\\\videos\\\\register\\\\74b1cb9280c28cfa0219fcb0b96b8a89.webm'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:877: PermissionError"}, "steps": [{"name": "Điền form và gửi", "status": "passed", "start": 1759480636151, "stop": 1759480640905}], "attachments": [{"name": "Hiring-1_success", "source": "bc0d74f3-896d-4d5e-ad69-fb7dad2c492f-attachment.png", "type": "image/png"}], "parameters": [{"name": "tcid", "value": "'Hiring-1'"}, {"name": "gender", "value": "'Anh'"}, {"name": "name", "value": "'Nguyen Van A'"}, {"name": "phone", "value": "'0912345678'"}, {"name": "address", "value": "'Hà Nội'"}, {"name": "note", "value": "None"}, {"name": "expected_message", "value": "'Đăng ký thành công'"}, {"name": "result", "value": "None"}, {"name": "screenshot", "value": "None"}, {"name": "video", "value": "None"}], "start": 1759480633925, "stop": 1759480641808, "uuid": "0fbdc235-decb-4f2f-8188-bef8a1caee82", "historyId": "6cd21969ad4faf5d26e0f330f82922ca", "testCaseId": "b422b89a2652c3bc20ad4eba6e0b3edf", "fullName": "tests.test_register_tutor#test_register_tutor", "labels": [{"name": "feature", "value": "Register Tutor"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_register_tutor"}, {"name": "host", "value": "LTADUYEN"}, {"name": "thread", "value": "12208-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_register_tutor"}], "titlePath": ["tests", "test_register_tutor.py"]}