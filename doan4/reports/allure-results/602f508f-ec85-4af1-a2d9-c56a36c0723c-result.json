{"name": "Register Tutor Test Case: Hiring-3", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TargetClosedError: Page.screenshot: Target page, context or browser has been closed", "trace": "tcid = 'Hiring-3', gender = 'Anh', name = 'Nguyen Van A', phone = '', address = 'Hà Nội', note = ''\nexpected_message = 'Số điện thoại là bắt buộc', result = None, screenshot = None, video = None\n\n    @pytest.mark.parametrize(\n        \"tcid, gender, name, phone, address, note, expected_message, result, screenshot, video\",\n        read_test_data(DATA_FILE, \"RegisterTutorTestData\"),\n        ids=lambda val: str(val[0]) if isinstance(val, (list, tuple)) else str(val),\n    )\n    @allure.feature(\"Register Tutor\")\n    @allure.title(\"Register Tutor Test Case: {tcid}\")\n    def test_register_tutor(\n        tcid,\n        gender,\n        name,\n        phone,\n        address,\n        note,\n        expected_message,\n        result,\n        screenshot,\n        video,\n    ):\n        gender = \"\" if gender is None else str(gender)\n        name = \"\" if name is None else str(name)\n        phone = \"\" if phone is None else str(phone)\n        address = \"\" if address is None else str(address)\n        note = \"\" if note is None else str(note)\n        expected_message = \"\" if expected_message is None else str(expected_message)\n    \n        with sync_playwright() as p:\n            browser = p.chromium.launch(\n                headless=False, slow_mo=500, args=[\"--start-maximized\"]\n            )\n            context = browser.new_context(\n                no_viewport=True,\n                record_video_dir=VIDEO_DIR,\n                record_video_size={\"width\": 1280, \"height\": 720},\n            )\n            page = context.new_page()\n    \n            reg_page = RegisterTutorPage(page)\n            marketing_url = get_marketing_url()\n            reg_page.goto(marketing_url)\n    \n            with allure.step(\"Điền form và gửi\"):\n                reg_page.register(gender, name, phone, address, note)\n    \n            screenshot_path = os.path.join(SCREENSHOT_DIR, f\"{tcid}.png\")\n            final_video_path = os.path.join(VIDEO_DIR, f\"{tcid}.webm\")\n            test_result = \"FAIL\"\n    \n            try:\n                if expected_message.strip():\n                    expect(page.get_by_text(expected_message, exact=False)).to_be_visible(\n                        timeout=10000\n                    )\n                else:\n                    expect(page).to_have_url(\n                        marketing_url + \"/dang-ky-thue-gia-su\", timeout=10000\n                    )\n    \n                test_result = \"PASS\"\n                page.screenshot(path=screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=f\"{tcid}_success\",\n                    attachment_type=allure.attachment_type.PNG,\n                )\n            except AssertionError:\n>               page.screenshot(path=screenshot_path)\n\ntests\\test_register_tutor.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:9784: in screenshot\n    self._sync(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_page.py:818: in screenshot\n    encoded_binary = await self._channel.send(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000020D6DAE8E10>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000020D6DB3E3E0>, is_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TargetClosedError: Page.screenshot: Target page, context or browser has been closed\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: TargetClosedError"}, "steps": [{"name": "Điền form và gửi", "status": "passed", "start": 1759482455584, "stop": 1759482458858}], "parameters": [{"name": "tcid", "value": "'Hiring-3'"}, {"name": "gender", "value": "'Anh'"}, {"name": "name", "value": "'Nguyen Van A'"}, {"name": "phone", "value": "None"}, {"name": "address", "value": "'Hà Nội'"}, {"name": "note", "value": "None"}, {"name": "expected_message", "value": "'Số điện thoại là bắt buộc'"}, {"name": "result", "value": "None"}, {"name": "screenshot", "value": "None"}, {"name": "video", "value": "None"}], "start": 1759482453379, "stop": 1759482465456, "uuid": "f482846f-53df-4c33-83a1-25b37d3a85e8", "historyId": "13cb0ca01e258f80d1473a31671e8a42", "testCaseId": "b422b89a2652c3bc20ad4eba6e0b3edf", "fullName": "tests.test_register_tutor#test_register_tutor", "labels": [{"name": "feature", "value": "Register Tutor"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_register_tutor"}, {"name": "host", "value": "LTADUYEN"}, {"name": "thread", "value": "19228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_register_tutor"}], "titlePath": ["tests", "test_register_tutor.py"]}